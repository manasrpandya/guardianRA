#ifndef AE_MODEL_H
#define AE_MODEL_H

#include <stdint.h>
#include "scaler.h"

#ifndef LATENT_DIM
#define LATENT_DIM (8)
#endif

/* Example exported PCA components (D x K) and threshold. Offline export will overwrite. */
static const float g_components[FEATURE_DIM * LATENT_DIM] = {
    /* Rows of size LATENT_DIM per feature dimension (FEATURE_DIM rows) */
    1.20000000e-01f,  2.10000000e-01f, -1.30000000e-01f,  1.90000000e-01f, -8.00000000e-02f,  7.00000000e-02f,  1.50000000e-01f, -1.10000000e-01f,
    1.10000000e-01f,  1.90000000e-01f, -1.10000000e-01f,  1.70000000e-01f, -7.00000000e-02f,  6.00000000e-02f,  1.30000000e-01f, -1.00000000e-01f,
    1.00000000e-01f,  1.80000000e-01f, -1.00000000e-01f,  1.60000000e-01f, -6.00000000e-02f,  5.00000000e-02f,  1.20000000e-01f, -9.00000000e-02f,
    9.00000000e-02f,  1.70000000e-01f, -9.00000000e-02f,  1.50000000e-01f, -5.00000000e-02f,  4.00000000e-02f,  1.10000000e-01f, -8.00000000e-02f,
    8.00000000e-02f,  1.60000000e-01f, -8.00000000e-02f,  1.40000000e-01f, -4.00000000e-02f,  3.00000000e-02f,  1.00000000e-01f, -7.00000000e-02f,
    7.00000000e-02f,  1.50000000e-01f, -7.00000000e-02f,  1.30000000e-01f, -3.00000000e-02f,  2.00000000e-02f,  9.00000000e-02f, -6.00000000e-02f,
    6.00000000e-02f,  1.40000000e-01f, -6.00000000e-02f,  1.20000000e-01f, -2.00000000e-02f,  1.00000000e-02f,  8.00000000e-02f, -5.00000000e-02f,
    5.00000000e-02f,  1.30000000e-01f, -5.00000000e-02f,  1.10000000e-01f, -1.00000000e-02f,  8.00000000e-03f,  7.00000000e-02f, -4.00000000e-02f,
    4.00000000e-02f,  1.20000000e-01f, -4.00000000e-02f,  1.00000000e-01f, -9.00000000e-03f,  7.00000000e-03f,  6.00000000e-02f, -3.00000000e-02f,
    3.00000000e-02f,  1.10000000e-01f, -3.00000000e-02f,  9.00000000e-02f, -8.00000000e-03f,  6.00000000e-03f,  5.00000000e-02f, -2.00000000e-02f,
    2.00000000e-02f,  1.00000000e-01f, -2.00000000e-02f,  8.00000000e-02f, -7.00000000e-03f,  5.00000000e-03f,  4.00000000e-02f, -1.00000000e-02f,
    1.00000000e-02f,  9.00000000e-02f, -1.00000000e-02f,  7.00000000e-02f, -6.00000000e-03f,  4.00000000e-03f,  3.00000000e-02f, -9.00000000e-03f,
    9.00000000e-03f,  8.00000000e-02f, -9.00000000e-03f,  6.00000000e-02f, -5.00000000e-03f,  3.00000000e-03f,  2.00000000e-02f, -8.00000000e-03f,
    8.00000000e-03f,  7.00000000e-02f, -8.00000000e-03f,  5.00000000e-02f, -4.00000000e-03f,  2.00000000e-03f,  1.00000000e-02f, -7.00000000e-03f,
    7.00000000e-03f,  6.00000000e-02f, -7.00000000e-03f,  4.00000000e-02f, -3.00000000e-03f,  1.00000000e-03f,  9.00000000e-03f, -6.00000000e-03f,
    6.00000000e-03f,  5.00000000e-02f, -6.00000000e-03f,  3.00000000e-02f, -2.00000000e-03f,  1.00000000e-03f,  8.00000000e-03f, -5.00000000e-03f,
    5.00000000e-03f,  4.00000000e-02f, -5.00000000e-03f,  2.00000000e-02f, -1.00000000e-03f,  1.00000000e-03f,  7.00000000e-03f, -4.00000000e-03f,
    4.00000000e-03f,  3.00000000e-02f, -4.00000000e-03f,  1.00000000e-02f, -9.00000000e-04f,  8.00000000e-04f,  6.00000000e-03f, -3.00000000e-03f,
    3.00000000e-03f,  2.00000000e-02f, -3.00000000e-03f,  9.00000000e-03f, -8.00000000e-04f,  7.00000000e-04f,  5.00000000e-03f, -2.00000000e-03f,
    2.00000000e-03f,  1.00000000e-02f, -2.00000000e-03f,  8.00000000e-03f, -7.00000000e-04f,  6.00000000e-04f,  4.00000000e-03f, -1.00000000e-03f,
    1.00000000e-03f,  9.00000000e-03f, -1.00000000e-03f,  7.00000000e-03f, -6.00000000e-04f,  5.00000000e-04f,  3.00000000e-03f, -9.00000000e-04f,
    9.00000000e-04f,  8.00000000e-03f, -9.00000000e-04f,  6.00000000e-03f, -5.00000000e-04f,  4.00000000e-04f,  2.00000000e-03f, -8.00000000e-04f,
    8.00000000e-04f,  7.00000000e-03f, -8.00000000e-04f,  5.00000000e-03f, -4.00000000e-04f,  3.00000000e-04f,  1.00000000e-03f, -7.00000000e-04f,
    7.00000000e-04f,  6.00000000e-03f, -7.00000000e-04f,  4.00000000e-03f, -3.00000000e-04f,  2.00000000e-04f,  9.00000000e-04f, -6.00000000e-04f,
    6.00000000e-04f,  5.00000000e-03f, -6.00000000e-04f,  3.00000000e-03f, -2.00000000e-04f,  1.00000000e-04f,  8.00000000e-04f, -5.00000000e-04f,
    5.00000000e-04f,  4.00000000e-03f, -5.00000000e-04f,  2.00000000e-03f, -1.00000000e-04f,  1.00000000e-04f,  7.00000000e-04f, -4.00000000e-04f,
    4.00000000e-04f,  3.00000000e-03f, -4.00000000e-04f,  1.00000000e-03f, -1.00000000e-04f,  1.00000000e-04f,  6.00000000e-04f, -3.00000000e-04f,
    3.00000000e-04f,  2.00000000e-03f, -3.00000000e-04f,  9.00000000e-04f, -1.00000000e-04f,  1.00000000e-04f,  5.00000000e-04f, -2.00000000e-04f,
    2.00000000e-04f,  1.00000000e-03f, -2.00000000e-04f,  8.00000000e-04f, -1.00000000e-04f,  1.00000000e-04f,  4.00000000e-04f, -1.00000000e-04f
};

static inline float ae_infer_recon_error(const float * __restrict__ x /* D */)
{
    float z[LATENT_DIM];
    float xz_hat[FEATURE_DIM];
    for (int k = 0; k < LATENT_DIM; ++k) z[k] = 0.0f;
    for (int d = 0; d < FEATURE_DIM; ++d) {
        const float xz = (x[d] - g_scaler_mean[d]) / g_scaler_std[d];
        const int base = d * LATENT_DIM;
        for (int k = 0; k < LATENT_DIM; ++k) z[k] += xz * g_components[base + k];
    }
    for (int d = 0; d < FEATURE_DIM; ++d) xz_hat[d] = 0.0f;
    for (int d = 0; d < FEATURE_DIM; ++d) {
        const int base = d * LATENT_DIM;
        float acc = 0.0f;
        for (int k = 0; k < LATENT_DIM; ++k) acc += z[k] * g_components[base + k];
        xz_hat[d] = acc;
    }
    float err = 0.0f;
    for (int d = 0; d < FEATURE_DIM; ++d) {
        const float xz = (x[d] - g_scaler_mean[d]) / g_scaler_std[d];
        const float diff = xz - xz_hat[d];
        err += diff * diff;
    }
    return err;
}

static const float g_anomaly_threshold = 1.20000000e+00f;

#endif /* AE_MODEL_H */
